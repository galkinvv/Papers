#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass slides
\begin_preamble
% Uncomment to print out only slides and overlays
%
%\onlyslides{\slides}

% Uncomment to print out only notes
%
%\onlynotes{\notes}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics dvips
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Slide

\end_layout

\begin_layout Standard
Алгоритмы вычисления базиса Грёбнера
\end_layout

\begin_layout Itemize
Алгоритм Бухбергера -- первый и наименее эффективный
\end_layout

\begin_layout Itemize
Алгоритмы для вычислений над 
\begin_inset Formula $\mathbb{R}$
\end_inset

 и 
\begin_inset Formula $\mathbb{C}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Символические вычисления (исчерпывающий базис) -- рост символических коэффициент
ов
\end_layout

\begin_layout Itemize
Вычисления над 
\begin_inset Formula $\mathbb{Z}$
\end_inset

 и 
\begin_inset Formula $\mathbb{Q}$
\end_inset

 -- рост длины численных коэффициентов
\end_layout

\begin_layout Itemize
Вычисления с оценкой точности -- проблемы нулей
\end_layout

\begin_deeper
\begin_layout Itemize
Определение численными методами
\end_layout

\begin_layout Itemize
Определение модулярными методами
\end_layout

\begin_layout Itemize
Изменение порядка на мономах
\end_layout

\end_deeper
\end_deeper
\begin_layout Slide

\end_layout

\begin_layout Standard
Алгоритмы вычисления базиса Грёбнера
\end_layout

\begin_layout Itemize
Алгоритм Бухбергера -- первый и наименее эффективный
\end_layout

\begin_layout Itemize
Алгоритмы основанные на сигнатурах -- показали большую эффективность
\end_layout

\begin_deeper
\begin_layout Itemize
F5 -- не минимальный S-базис
\end_layout

\begin_layout Itemize
GVW, ArriPerry -- отбрасывание результатов вычислений
\end_layout

\begin_layout Itemize
TRB-MJ/SB -- наиболее эффективные на сегодня
\end_layout

\end_deeper
\begin_layout Standard
На основе TRB-MJ/SB строится алгоритм SSG с простой реализацией и доказательство
м.
\end_layout

\begin_layout Slide

\end_layout

\begin_layout Standard
TODO: Псевдокод алгоритм SSG на 1-2 слайда.
\end_layout

\begin_layout Slide

\end_layout

\begin_layout Standard
TODO: Примеры того, когда прямое применение этого алгоритма к приближённым
 число приводит к проблемам (взять из диссертации) 1-3 слайда.
\end_layout

\begin_layout Slide

\end_layout

\begin_layout Standard
Сигнатурные алгоритмы для 
\begin_inset Formula $\mathbb{R}$
\end_inset

 и 
\begin_inset Formula $\mathbb{C}$
\end_inset


\end_layout

\begin_layout Itemize
F5+TSV: Комбинирование идей F5 и приближённых вычислений с введением дополнитель
ных переменных для 
\begin_inset Quotes eld
\end_inset

изменения
\begin_inset Quotes erd
\end_inset

 порядка.
 Недостаток -- полный перезапуск алгоритмов после добавления многочленов
\end_layout

\begin_layout Itemize
Предлагаемый алгоритм: SSG, дополненный
\end_layout

\begin_deeper
\begin_layout Itemize
модулярными методами определения нулей
\end_layout

\begin_layout Itemize
добавлением многочленов сочетаемым с сигнатурностью -- алгоритм продолжается
 после добавления многочленов без полного перезапуска
\end_layout

\end_deeper
\begin_layout Slide

\end_layout

\begin_layout Standard
Формализация задачи: ищем множество, содержащее решения при любых специализациях.
\end_layout

\begin_layout Standard
Модулярные методы носят вероятностный характер.
 Ложные нули получаются, если выбранные значения оказываются корнем символическо
го многочлена.
 Это возможно, если:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\mathbb{Q}$
\end_inset

-многочлен тождественно обнуляется по выбранному модулю
\end_layout

\begin_deeper
\begin_layout Itemize
Оценка на максимальный коэффициент для определения максимального числа простых
 чисел, на которые делится
\end_layout

\end_deeper
\begin_layout Itemize
модулярная специализация 
\begin_inset Formula $\mathbb{Q}$
\end_inset

-многочлена имеет корень
\end_layout

\begin_deeper
\begin_layout Itemize
Оценка на максимальную степень
\end_layout

\end_deeper
\begin_layout Slide

\end_layout

\begin_layout Standard
TODO: формулировки (и устные доказательства) теорем оценки на вероятность
 попасть на плохое модулярное число при произвольном выборе.
 1-3 слайда.
\end_layout

\begin_layout Slide

\end_layout

\begin_layout Standard
Упорядочивания на сигнатурах.
\end_layout

\begin_layout Standard
TODO:Взвешенный порядок с весами, соответствующим старшим мономам.
 Использование произвольных весов при добавлении многочленов для сохранения
 сигнатур.
\end_layout

\end_body
\end_document
