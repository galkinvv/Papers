#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass birkmult
\begin_preamble
\sloppy
%\usepackage{geometry}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\begin_local_layout

\end_local_layout
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman CMU Serif
\font_sans CMU Sans Serif
\font_typewriter CMU Typewriter Text
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 7
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "unicode=false"
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 0 0 -1
\bullet 1 0 6 -1
\bullet 2 0 10 -1
\bullet 3 0 9 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Address
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Vasily Galkin}
\end_layout

\begin_layout Plain Layout


\backslash
address{Chair of Higher Algebra, Faculty of Mechanics and Mathematics, Moscow
 State University, Moscow, Russia}
\end_layout

\begin_layout Plain Layout


\backslash
email{galkin-vv@ya.ru}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Signature-based Gröbner basis computations for approximate input
\end_layout

\begin_layout Abstract
This work develops the methods for application signature-based algorithms
 for computing Gröbner basis to the inexact input data in 
\begin_inset Formula $\mathbb{C}$
\end_inset

 derived from the task of solving approximate polynomial systems.
 The first method is based on the idea of modular computations which is
 known to give incorrect result with some probability and extends it in
 a way that this probability can be strictly estimated.
 The second method is based on the previously known TSV (Term Substitution
 with Variables) strategy and develops the signature ordering that allows
 TSV to be applied to signature-based algorithms without restarts.
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\GVWg}{>_{\text{\textnormal{H}}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\GVWl}{<_{\text{H}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\eqdef}{\overset{\mathrm{_{def}}}{=}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\equivdef}{\overset{\mathrm{_{def}}}{\Leftrightarrow}}
\end_inset

	
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Sig}{\mathcal{S}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\HM}{\mathrm{LM}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\HC}{\mathrm{LC}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\LCM}{\mathrm{LCM}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\totaldeg}{\mathrm{deg}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\poly}{\mathrm{poly}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\sigidx}{\mathrm{index}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Sss}[2]{\left\langle #1\centerdot#2\right\rangle }
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\monone}{\mathbf{1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\monzero}{\mathbf{0}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
let
\backslash
flqq
\backslash
guillemotleft
\end_layout

\begin_layout Plain Layout


\backslash
let
\backslash
frqq
\backslash
guillemotright
\end_layout

\end_inset


\end_layout

\begin_layout Section
Algorithms for computing Gröbner basis
\end_layout

\begin_layout Standard
One of the modern practical applications of commutative algebra is its usage
 in computer solving of approximate polynomial systems arising from various
 areas.
 The Gröbner basis is one of the main instruments that can be used to solve
 them.
 The classic algorithm for computing Gröbner bases is the Buchberger algorithm,
 but there are more efficient algorithms including signature-based algorithms
 
\begin_inset CommandInset citation
LatexCommand cite
key "FaugereF5,F5C,EderF5A,G2V,GVW,PracticalGB,HuangConception"

\end_inset

.
\end_layout

\begin_layout Standard
Most of them are formulated for coefficients in a field, but not for approximate
 numbers.
 The root of problem with applying to approximate numbers is in zero equality
 testings: they are needed by algorithms for key branchings but not always
 defined for approximate numbers.
 There are different approaches for this problem:
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:in-Q"

\end_inset

round inexact numbers to rational and perform the computation in field 
\begin_inset Formula $\mathbb{Q}$
\end_inset

;
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:as-symbols"

\end_inset

treat approximate numbers as symbols and use symbolic quotient field;
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:other- basis"

\end_inset

abandon the Gröbner basis and use other variant of basis for system solving;
\end_layout

\begin_layout Enumerate
use a pseudo-field of approximate numbers but avoid problematic zero testing:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:other-fields"

\end_inset

get zero testing result with some heuristics 
\begin_inset CommandInset citation
LatexCommand cite
key "ModularTraverso"

\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:adjusting-the-monomial"

\end_inset

add special polynomials to reduce problematic coefficient 
\begin_inset CommandInset citation
LatexCommand cite
key "NumericalComputationGB,NumericalComputationOfGBVarSubsttution,GroebnerInExtFields,ArtificialDiscontinuities"

\end_inset

;
\end_layout

\end_deeper
\begin_layout Standard
Approaches 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:in-Q"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:as-symbols"

\end_inset

 make the approximate variant much slower than the same algorithm applied
 to finite fields because non-constant complexity of arithmetic operations
 with coefficients.
 The possibility to combine approach 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:other- basis"

\end_inset

 with a signature-based algorithms is an open question because they are
 initially designed for Gröbner basis.
\end_layout

\begin_layout Standard
The approach 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:other-fields"

\end_inset

 as it is described in 
\begin_inset CommandInset citation
LatexCommand cite
key "ModularTraverso"

\end_inset

 is perfect in terms of computational speed.
 But the heuristics can lead to wrong answer and there is no any probability
 estimations of such case, so while the approach may be used in practice,
 it lacks the strict proof.
 In 
\begin_inset CommandInset citation
LatexCommand cite
key "GroebnerInExtFields"

\end_inset

 the TSV method based on approach 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:adjusting-the-monomial"

\end_inset

 was successfully combined with signature-based algorithm F5.
 But it has a serious slowdown compared to original F5: after every polynomial
 addition the F5 is restarted from the beginning because signature based
 algorithms require particular order in input polynomial processing.
 This work introduces methods based on approaches 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:other-fields"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:adjusting-the-monomial"

\end_inset

 that try to solve above mentioned problems.
\end_layout

\begin_layout Section
Problem statement in approximate numbers
\end_layout

\begin_layout Standard
Before formulating these methods we need to prepare the formal statement
 of the problem.
 We assume that approximate input data consists of a multivariate polynomial
 equations system with complex coefficients and for each coefficient we
 know the maximum inaccuracy of it's value.
 Approximate numbers are defined in a such way that such input data can
 be easily represented by them.
 The 
\emph on
approximate number
\emph default
 is a pair 
\begin_inset Formula $\left(a,\varepsilon\right)$
\end_inset

, where 
\begin_inset Formula $a\in\mathbb{C},0\leqslant\varepsilon\in\mathbb{R}$
\end_inset

.
 Element 
\begin_inset Formula $a$
\end_inset

 is called 
\emph on
approximation
\emph default
, and 
\begin_inset Formula $\varepsilon$
\end_inset

 -- 
\emph on
variation radius
\emph default
.
 The elements of set 
\begin_inset Formula $\left\{ a+e|e\in\mathbb{C},\left|e\right|\leqslant\varepsilon\right\} \subset\mathbb{C}$
\end_inset

 are called 
\emph on
specializations
\emph default
 of approximate number.
\end_layout

\begin_layout Standard
For every approximate number in input we can take some it's specialization
 and get the polynomial system in 
\begin_inset Formula $\mathbb{C}$
\end_inset

.
 Such systems are called 
\emph on
specializations of approximate input data
\emph default
.
 The desired approximate solution of the problem consists of the set of
 approximate numbers corresponding to variables.
 
\emph on
Specializations of solution
\emph default
 are defined too -- they are represented by a set of variable values in
 
\begin_inset Formula $\mathbb{C}$
\end_inset

.
 The design of approximate computations is based on the following 
\emph on
approximation idea
\emph default
: the approximate result of some computation should have specializations
 equal to any of exact results corresponding to computation in 
\begin_inset Formula $\mathbb{C}$
\end_inset

 performed with some input data specialization.
 Applying this to the whole task we get: 
\begin_inset Formula $\forall$
\end_inset

 specializations of approximate input data 
\begin_inset Formula $\exists$
\end_inset

 specialization of approximate solution that gives the exact solution in
 
\begin_inset Formula $\mathbb{C}$
\end_inset

 for the exact input data specialization.
 Applying it to arithmetic operations we get their definitions:
\end_layout

\begin_layout Labeling
\labelwidthstring Multiplication
Addition 
\begin_inset Formula $(a_{1},\varepsilon_{1})+(a_{2},\varepsilon_{2}):=(a_{1}+a_{2},\varepsilon_{1}+\varepsilon_{2})$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring Multiplication
Multiplication 
\begin_inset Formula $(a_{1},\varepsilon_{1})\times(a_{2},\varepsilon_{2}):=(a_{1}a_{2},\varepsilon_{1}\left|a_{2}\right|+\varepsilon_{2}\left|a_{1}\right|+\varepsilon_{1}\varepsilon_{2})$
\end_inset

.
\end_layout

\begin_layout Labeling
\labelwidthstring Multiplication
Negation based on multiplication: 
\begin_inset Formula $-(a,\varepsilon):=(a,\varepsilon)\times\left(-1,0\right)=(-a,\varepsilon).$
\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring Multiplication
Inversion defined only if zero isn't 
\begin_inset Formula $(a,\varepsilon)$
\end_inset

 specialization (
\begin_inset Formula $\Longleftrightarrow\left|a\right|-\varepsilon>0$
\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{1}{(a,\varepsilon)}:=\left(\frac{1}{a},\frac{\varepsilon}{\left|a\right|\left(\left|a\right|-\varepsilon\right)}\right).
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Approximate representations with rationals - allowed lose of accuracy that
 doesn't heart approximation idea
\end_layout

\end_inset


\end_layout

\begin_layout Section
Non-invertible approximate elements
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
There is a need to say that we are speaking only about first difference
\end_layout

\end_inset

 The comparison of same algorithm runs on the approximate input and on it's
 specializations reveals the difference in two cases:
\end_layout

\begin_layout Itemize
approximated algorithm attempts to perform reduction by polynomial with
 non-invertible leading coefficient;
\end_layout

\begin_layout Itemize
zero-testing of some monomial coefficient gives zero for the specialization
 but non-zero for approximate case.
 Though it is non-zero, it has a zero specialization due to approximation
 idea, so the approximate element is non-invertible.
\end_layout

\begin_layout Standard
In both cases the difference is inspired by non-invertible approximate elements.
 They can be classified to several kinds:
\end_layout

\begin_layout Itemize
element is 
\emph on
symbolic zero
\emph default
 if the corresponding 
\begin_inset Formula $\mathbb{C}$
\end_inset

-coefficient is zero in the algorithm application to any of input specialization
s;
\end_layout

\begin_layout Itemize
element is 
\emph on
computation-introduced zero
\emph default
 if the corresponding 
\begin_inset Formula $\mathbb{C}$
\end_inset

-coefficient is non-zero in the algorithm application to any of input specializa
tions;
\end_layout

\begin_layout Itemize
in the other case when the element is called 
\emph on
input-inspired zero.
\end_layout

\begin_layout Section
Modular method
\end_layout

\begin_layout Standard
The first two cases of non-invertible elements correspond to a situation
 in which there is a chance to fix non-invertible approximate element by
 changing it to exactly zero (for symbolic zero) or to invertible element
 (for
\emph on
 
\emph default
computation-introduced zero) and still keep the approximation idea satisfied.
 The trivial approach to determine possibility of such replacement is keeping
 a symbolic parametric representation of each coefficient with parameters
 corresponding to approximate numbers in input.
 Such representations allows to find some exact cancellations which in some
 cases can lead to empty zero polynomial (symbolic zero case) or polynomial
 expression that allows to construct more exact approximate number than
 direct algorithm application (computation-introduced zero case).
 In the latter case more exact number may be invertible.
\end_layout

\begin_layout Standard
The problem of this trivial approach is speed and memory requirements for
 symbolic computation -- both are not 
\begin_inset Formula $O(1)$
\end_inset

 compared to simple approximate algorithm.
 In
\begin_inset CommandInset citation
LatexCommand cite
key "ModularTraverso"

\end_inset

an optimization is proposed: symbolic polynomials with parameters are replaced
 by polynomials in finite field with random values substituted in place
 of parameters.
 Zero coefficient appeared in such polynomials correspond to zero coefficient
 in symbolic polynomial with high probability -- the situation when the
 monomial is absent due to full cancellation.
 This technique allows to find some symbolic zeros in approximate data in
 the following way: the algorithm is simultaneously applied to approximate
 data and finite field data, and if non-invertible approximate element correspon
d to zero finite field element it is replaced by exact zero too.
 Unfortunately this optimization lacks the incorrect result probability
 estimation, and such estimation is hard to construct because the complexity
 of replaced symbolic polynomials is unknown.
\end_layout

\begin_layout Standard
The modular method described below is more complex, allows fixing of some
 computation-introduced zeros and giving reasonable estimation for incorrect
 result probability, but lacks the time complexity comparison with other
 variants.
 Its flow is following:
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:first field selection"

\end_inset

At first we take some arbitrary finite field 
\begin_inset Formula $\mathbb{F}$
\end_inset

 and replace coefficients with ts random elements.
 This step is identical to method from 
\begin_inset CommandInset citation
LatexCommand cite
key "ModularTraverso"

\end_inset

.
\end_layout

\begin_layout Enumerate
A special lower-than-all monomials is added at the end of every polynomial.
 It participate in all finite field computations and is used to determine
 how a computed polynomial can be written as a polynomial combination of
 input data.
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset label
LatexCommand label
name "enu:in-finite-field-1"

\end_inset

The algorithm is run for finite field case and generates Gröbner basis.
 For every its polynomial 
\begin_inset Formula $f$
\end_inset

 the following steps a re performed:
\end_layout

\begin_deeper
\begin_layout Enumerate
Another finite field 
\begin_inset Formula $\mathbb{F}'$
\end_inset

 is selected; now not arbitrarily.
 but by explicit rule based on maximal allowed error probability and structure
 of 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Enumerate
The algorithm try to construct similar to 
\begin_inset Formula $f$
\end_inset

 polynomial in another fields:
\end_layout

\begin_deeper
\begin_layout Enumerate
it suggests that constructed polynomial is expressed as polynomial combination
 of input data like 
\begin_inset Formula $f$
\end_inset

 and takes information about it from the lower-than-all monomials in 
\begin_inset Formula $f$
\end_inset

;
\end_layout

\begin_layout Enumerate
it suggests that the leading monomial of constructed polynomial is 
\begin_inset Formula $\HM\left(f\right)$
\end_inset

;
\end_layout

\begin_layout Enumerate
it creates a linear system based on those suggestions, with every element
 of the system matrix being a pair of approximate number and number from
 
\begin_inset Formula $\mathbb{F}'$
\end_inset

;
\end_layout

\begin_layout Enumerate
the system is solved, using zeros from 
\begin_inset Formula $\mathbb{F}'$
\end_inset

 to determine and fix some symbolic zeros in approximate numbers;
\end_layout

\begin_layout Enumerate
if the solution is impossible due to non-invertible approximate number the
 task is abandoned, because such situation can't be handled;
\end_layout

\begin_layout Enumerate
if the system has no solutions the suggestions are incorrect, so the algorithm
 restarts with selecting new field in step 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:first field selection"

\end_inset

;
\end_layout

\begin_layout Enumerate
if the solution is found it is used to write out another polynomial of approxima
te Gröbner basis.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
The ability to estimate incorrect result possibility is achieved by not
 trusting the result got with 
\begin_inset Formula $\mathbb{F}$
\end_inset

 and knowledge of system size during selection of the finite field 
\begin_inset Formula $\mathbb{F}'$
\end_inset

.
 The ability to fix some computation-introduced zeros follows from computations
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:in-finite-field-1"

\end_inset

 where some input polynomials presenting in intermediate values can totally
 cancel leading to absence of corresponding lower-than-all monomials in
 
\begin_inset Formula $f$
\end_inset

.
 In the approximate-only computations such cancellations introduces loose
 of accuracy expressed in variation radius grow and sometimes gives introduced-z
ero.
\end_layout

\begin_layout Section
Introducing real-weighted order for TSV method
\end_layout

\begin_layout Standard
Unfortunately modular methods can't do anything with input-inspired zeros,
 because any approximate number in the corresponding place that satisfy
 approximation idea will be non-invertible but not exactly zero.
 If the algorithm requires inversion of such number modular methods abandon
 the task.
 So another method is required to overcome this problem.
 The TSV method developed in 
\begin_inset CommandInset citation
LatexCommand cite
key "GroebnerInExtFields"

\end_inset

solves this problem by adding to input data a new lesser-than-others monomial
 
\begin_inset Formula $y_{k}$
\end_inset

 and a polynomial of the form 
\begin_inset Formula $M_{k}-y_{k}$
\end_inset

 every time the algorithm tries to invert non-invertible approximate number
 being a coefficient of monomial 
\begin_inset Formula $M_{k}$
\end_inset

.
 The presence of such polynomial in the input data leads to reducing the
 monomial 
\begin_inset Formula $M_{k}$
\end_inset

 in other polynomials, so the algorithm doesn't try to invert coefficient
 of 
\begin_inset Formula $M_{k}$
\end_inset

 because it becomes zero.
 The coefficient of 
\begin_inset Formula $y_{k}$
\end_inset

 becomes non-invertible but it is lesser-than-others monomial and the algorithm
 doesn't try to invert its coefficient.
\end_layout

\begin_layout Standard
Addition of the extra polynomial to input data has two important consequences.
 First is the extension of the solved problem -- the algorithm doesn't find
 the requested Gröbner basis of ideal 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\left(f_{1},\dots,f_{m}\right)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 in polynomial ring 
\begin_inset Formula $\mathcal{P}$
\end_inset

 but a Gröbner basis of some extended ideal in an extended polynomial ring
 
\begin_inset Formula $\mathcal{P}^{E}$
\end_inset

.
 To allow application of such object to polynomial system solving the action
 matrix method for system solving 
\begin_inset CommandInset citation
LatexCommand cite
key "UsingAlgebraicGeometry"

\end_inset

 is reformulated in more general form: the usage of Gröbner basis is replaced
 by usage of normal form operator giving coordinates in some basis of 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\mathcal{P}/\left(f_{1},\dots,f_{m}\right)$
\end_inset

.

\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 To find such operator from extended Gröbner basis we compose the normal
 form 
\begin_inset Quotes eld
\end_inset

reduction by basis operator
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $N:\mathcal{P}^{E}\rightarrow\mathcal{P}^{E}$
\end_inset

 defined by extended basis with a ring narrow operator 
\begin_inset Formula $e^{-}:\mathcal{P}^{E}\rightarrow\mathcal{P}$
\end_inset

 which replaces all added variables 
\begin_inset Formula $y_{k}$
\end_inset

 by corresponding monomials 
\begin_inset Formula $M_{k}$
\end_inset

.
 The composition 
\begin_inset Formula $e^{-}\circ N$
\end_inset

 acts from 
\begin_inset Formula $\mathcal{P}^{E}$
\end_inset

 to 
\begin_inset Formula $\mathcal{P}$
\end_inset

 and can be limited to desired 
\begin_inset Formula $\mathcal{P}\rightarrow\mathcal{P}$
\end_inset

 operator.
 This way the extended basis can be used for system solving without introducing
 the idea of extended ring in the solving method itself.
\end_layout

\begin_layout Standard
Another consequence of polynomial addition is more problematic: the signature-ba
sed algorithms must process polynomials strictly in the signature order
 and the addition polynomial should have a signature smaller than processed
 polynomial to be allowed for use as its reducer.
 This leads to the problem that the signature-based algorithm must be restarted
 from scratch every time a new polynomial gets added to the input data.
 The roots of this undesired behavior are in the limitations of orders tradition
ally used in signature algorithms for ordering signatures.
 We recall that a signature is a pair of monomial and a natural number written
 as 
\begin_inset Formula $\sigma=\Sss ti$
\end_inset

.
 Different signature orders suitable for Gröbner basis computation are studied
 in Term Orders paragraph of 
\begin_inset CommandInset citation
LatexCommand cite
key "GVW"

\end_inset

.
 The most widely used orders are: POT (position over term) and 
\series bold
g
\series default
2, also called the Schreyer order in
\begin_inset CommandInset citation
LatexCommand cite
key "Eder2012inhomogeneous"

\end_inset

.
 Their definitions are based on monomial order 
\begin_inset Formula $\prec$
\end_inset

 and input polynomials sequence 
\begin_inset Formula $f_{1},\dots,f_{m}$
\end_inset

.
\end_layout

\begin_layout Itemize
POT order: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\Sss{t_{1}}{i_{1}}\prec_{P}\Sss{t_{2}}{i_{2}}\Longleftrightarrow\left[\begin{aligned} & i_{1}<i_{2}\\
 & i_{1}=i_{2},t{}_{1}\prec t_{2}
\end{aligned}
\right..$
\end_inset


\end_layout

\begin_layout Itemize
Schreyer order: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\Sss{t_{1}}{i_{1}}\prec_{S}\Sss{t_{2}}{i_{2}}\Longleftrightarrow\left[\begin{aligned} & t_{1}\HM\left(f_{i_{1}}\right)\prec t_{2}\HM\left(f_{i_{2}}\right)\\
 & t_{1}\HM\left(f_{i_{1}}\right)=t_{2}\HM\left(f_{i_{2}}\right),i{}_{1}<i_{2}
\end{aligned}
\right..$
\end_inset


\end_layout

\begin_layout Standard
Both orders are quite limited for our case: they doesn't give enough freedom
 to make addition polynomial having a signature greater than all already
 processed except the currently processed one.
 To achieve this another very flexible order is introduced.
 it has two parameters vectors: monomials
\begin_inset Formula $w=(w_{1},\dots,w_{m})$
\end_inset

 and real numbers 
\begin_inset Formula $j=(j_{1},\dots,j_{m})$
\end_inset

.
\end_layout

\begin_layout Itemize

\emph on
Real-weighted order
\emph default
:
\begin_inset Formula $\Sss{t_{1}}{i_{1}}\prec_{w}\Sss{t_{2}}{i_{2}}\Longleftrightarrow\left[\begin{aligned} & t_{1}w_{i_{1}}\prec t_{2}w_{i_{2}}\\
 & t_{1}w_{i_{1}}=t_{2}w_{i_{2}},j_{i{}_{1}}<j_{i_{2}}
\end{aligned}
\right..$
\end_inset


\end_layout

\begin_layout Standard
The Schreyer order is an exactly special case of this order with parameters
 
\begin_inset Formula $w_{i}=\HM\left(f_{i}\right)$
\end_inset

 and 
\begin_inset Formula $j_{i}=i$
\end_inset

, The POT order can be roughly approximated by taking 
\begin_inset Formula $w_{i}=x^{A\cdot i}$
\end_inset

 and arbitrary 
\begin_inset Formula $j_{i}$
\end_inset

, where 
\begin_inset Formula $A$
\end_inset

 is a number much greater than degree of polynomials appeared in the algorithm
 and 
\begin_inset Formula $x$
\end_inset

 is some variable.
\end_layout

\begin_layout Standard
The real-weighted order gives TSV method the ability to add a polynomial
 
\begin_inset Formula $f_{m+k}=M_{k}-y_{k}$
\end_inset

 to input data with a signature that is just before the signature 
\begin_inset Formula $\Sss ti$
\end_inset

 of currently processed polynomial with non-invertible coefficient of 
\begin_inset Formula $M_{k}$
\end_inset

.
 The signature of added polynomial 
\begin_inset Formula $f_{m+k}$
\end_inset

is 
\begin_inset Formula $\Sss 1{m+k}$
\end_inset

by signature definition, so its position can be tuned by selecting parameters
 
\begin_inset Formula $w_{m+k},\, j_{m+k}$
\end_inset

 during parameters vector expansion.
 To place it just before 
\begin_inset Formula $\Sss ti$
\end_inset

 we need to select 
\begin_inset Formula $w_{m+k}=w_{i}t$
\end_inset

 and 
\begin_inset Formula $j_{m+k}=\frac{j_{i}+\max\left\{ j\in\left\{ j_{1},\dots,j_{m+k-1}\right\} |j<j_{i}\right\} }{2}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Such placement allows to proceed without algorithm restarting after polynomial
 addition in TSV, because the signature of added polynomial exactly correspond
 to the signature that should be processed now.
 This optimization allow most of signature-based algorithms be used with
 approximate input data with TSV method without restart because most of
 orders can be expressed as special cases of real-weighted order.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../f5_references"
options "alpha"

\end_inset


\end_layout

\end_body
\end_document
